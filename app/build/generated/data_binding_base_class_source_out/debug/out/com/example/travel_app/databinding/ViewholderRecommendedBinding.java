// Generated by view binder compiler. Do not edit!
package com.example.travel_app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.travel_app.R;
import com.google.android.material.imageview.ShapeableImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ViewholderRecommendedBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView addressTxt;

  @NonNull
  public final ImageView imageView3;

  @NonNull
  public final ImageView imageView4;

  @NonNull
  public final ShapeableImageView pic;

  @NonNull
  public final TextView priceTxt;

  @NonNull
  public final TextView scoreTxt;

  @NonNull
  public final TextView textView9;

  @NonNull
  public final TextView title;

  private ViewholderRecommendedBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView addressTxt, @NonNull ImageView imageView3, @NonNull ImageView imageView4,
      @NonNull ShapeableImageView pic, @NonNull TextView priceTxt, @NonNull TextView scoreTxt,
      @NonNull TextView textView9, @NonNull TextView title) {
    this.rootView = rootView;
    this.addressTxt = addressTxt;
    this.imageView3 = imageView3;
    this.imageView4 = imageView4;
    this.pic = pic;
    this.priceTxt = priceTxt;
    this.scoreTxt = scoreTxt;
    this.textView9 = textView9;
    this.title = title;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ViewholderRecommendedBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ViewholderRecommendedBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.viewholder_recommended, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ViewholderRecommendedBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.addressTxt;
      TextView addressTxt = ViewBindings.findChildViewById(rootView, id);
      if (addressTxt == null) {
        break missingId;
      }

      id = R.id.imageView3;
      ImageView imageView3 = ViewBindings.findChildViewById(rootView, id);
      if (imageView3 == null) {
        break missingId;
      }

      id = R.id.imageView4;
      ImageView imageView4 = ViewBindings.findChildViewById(rootView, id);
      if (imageView4 == null) {
        break missingId;
      }

      id = R.id.pic;
      ShapeableImageView pic = ViewBindings.findChildViewById(rootView, id);
      if (pic == null) {
        break missingId;
      }

      id = R.id.priceTxt;
      TextView priceTxt = ViewBindings.findChildViewById(rootView, id);
      if (priceTxt == null) {
        break missingId;
      }

      id = R.id.scoreTxt;
      TextView scoreTxt = ViewBindings.findChildViewById(rootView, id);
      if (scoreTxt == null) {
        break missingId;
      }

      id = R.id.textView9;
      TextView textView9 = ViewBindings.findChildViewById(rootView, id);
      if (textView9 == null) {
        break missingId;
      }

      id = R.id.title;
      TextView title = ViewBindings.findChildViewById(rootView, id);
      if (title == null) {
        break missingId;
      }

      return new ViewholderRecommendedBinding((ConstraintLayout) rootView, addressTxt, imageView3,
          imageView4, pic, priceTxt, scoreTxt, textView9, title);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
